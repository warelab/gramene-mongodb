#!/usr/bin/env node
var _ = require('lodash');
var Q = require('q');
var collections = require('gramene-mongodb-config');
var request = require('sync-request');

function parseAssays() {
  var deferred = Q.defer();
  var assays = {};
  require('readline').createInterface({
    input: process.stdin,
    terminal: false
  })
  .on('line', function(line) {
    var fields = line.split("\t");
    var _id = fields[0] + '_' + fields[1];
    if (!assays.hasOwnProperty(_id)) {
      assays[_id] = {
        'experiment' : fields[0],
        'group'      : fields[1],
        'characteristics' : {},
        'factors' : {}
      }
    }
    var c = fields[3].replace(/\s/g,'_');
    assays[_id][fields[2]+'s'][c] = fields[4];
    if (c === 'organism') {
      assays[_id].taxon_id = +fields[5].replace(/.*NCBITaxon_/,'');
    }
  })
  .on('close', function() {
    var experiments = _.groupBy(assays,'experiment');
    deferred.resolve(experiments);
  });
  return deferred.promise;
}

collections.taxonomy.mongoCollection().then(function(taxonomyCollection) {
  taxonomyCollection.find({subset:'gramene'},{_id:1,name:1}).toArray(function (err, docs) {
    var taxonomy = {};
    docs.forEach(function(doc) {
      taxonomy[doc._id] = doc.name;
    })
    collections.closeMongoDatabase();
    var lut={};
    parseAssays().then(function(experiments) {
      _.forEach(experiments, function(experiment, id) {
        if (taxonomy.hasOwnProperty(experiment[0].taxon_id)) {
          // note, some experiments have multiple factors not clear which will match the column header
          // Do we integrate this into genes docs? and how? what about PO?
          // *** for now we just want to know which genes have expression atlas data
          // generate a lookup table {<gene_id> : {expression: {<sample>:<fpkm} }}
          // I'd prefer the format generated by the commented code but nothing is output !?!?!?
          // {<gene_id> : {expression: [{sample: <sample>, fpkm: <fpkm>}]}}
          console.error('downloading',id, taxonomy[experiment[0].taxon_id]);
          var url = `http://www.ebi.ac.uk/gxa/experiments/${id}.tsv?cutoff=0`;
          var lines = request('GET',url).getBody().toString('ascii').split(/\n/);
          // lines[3] is the header line
          var cols = lines[3].split(/\t/);
          // lines[4..] are the data
          for(var i=4;i<lines.length;i++) {
            var geneExpr = lines[i].split(/\t/);
            if (!lut.hasOwnProperty(geneExpr[0])) {
              lut[geneExpr[0]] = {expression:{}};
              // lut[geneExpr[0]] = {expression: []};
            }
            for(var j=2;j<geneExpr.length;j++) {
              lut[geneExpr[0]].expression[cols[j]] = +geneExpr[j];
              // lut[geneExpr[0]].expression.push({
              //   sample: cols[j],
              //   fpkm: +geneExpr[j]
              // });
            }
          }
        }
      });
      console.log(JSON.stringify(lut,null,' '));
    });
  });
});
